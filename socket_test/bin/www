#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket_test:server');
var http = require('http');
var io = require('socket.io')(http);
var UserD = require('../models/user_data');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.listen(server).on('connection', function (socket) {

    socket.on('message', function (msg) {

        UserD.update({_id: msg.my_id}, {"$push": {"chat": msg}}, function (err, details) {
            if (err) {

            } else {
                console.log("message :" + msg.to_id);
            }
        });
        io.in(msg.to_id).emit('message', msg);

    });
    socket.on('join', function (data) {
        console.log("Joining :" + data);
        socket.join(data); // We are using room of socket io
    });
    socket.on('status', function (data) {

        UserD.update({_id: data.my_id}, {$set: {'status': data.status}}, function (err, details) {
            if (err) {
            } else {
                console.log("status :" + data.status_type);
                io.in(data.to_id).emit('statuscallback', data);
            }
        });
    });

})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
